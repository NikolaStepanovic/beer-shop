{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { REGISTER_USER, registerUserSuccess, LOGIN_USER, loginUserSuccess, loginUserFail } from '../action';\nimport axios from 'axios';\n\nconst API_POST = users => {\n  return axios.post('https://auth-backend-api.herokuapp.com/api/users/register', users).catch(err => err.response);\n};\n\n_c = API_POST;\n\nconst API_LOGIN = user => {\n  return axios.post('https://auth-backend-api.herokuapp.com/api/users/login', user).catch(err => err.response);\n};\n\n_c2 = API_LOGIN;\n\nfunction* loginUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    if (response.status === 200) yield put(loginUserSuccess(true));\n    if (response.status === 400) yield put(loginUserFail(response.data ? (response.data.email, response.data.password) : ''));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* registerUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_POST, user);\n    if (response.status === 200) yield put(registerUserSuccess(true));\n    if (response.status === 400) console.log(response.data);\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(REGISTER_USER, registerUsers);\n  yield takeLatest(LOGIN_USER, loginUsers);\n}\n\nexport default userSaga;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"API_POST\");\n$RefreshReg$(_c2, \"API_LOGIN\");","map":{"version":3,"sources":["/home/nidza/Desktop/my-app/src/store/saga/saga.js"],"names":["call","put","takeLatest","REGISTER_USER","registerUserSuccess","LOGIN_USER","loginUserSuccess","loginUserFail","axios","API_POST","users","post","catch","err","response","API_LOGIN","user","loginUsers","status","data","email","password","e","console","log","message","registerUsers","userSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,aADF,EAEEC,mBAFF,EAGEC,UAHF,EAIEC,gBAJF,EAKEC,aALF,QAMO,WANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxB,SAAOF,KAAK,CACTG,IADI,CAEH,2DAFG,EAGHD,KAHG,EAKJE,KALI,CAKEC,GAAG,IAAIA,GAAG,CAACC,QALb,CAAP;AAMD,CAPD;;KAAML,Q;;AASN,MAAMM,SAAS,GAAGC,IAAI,IAAI;AACxB,SAAOR,KAAK,CACTG,IADI,CAEH,wDAFG,EAGHK,IAHG,EAKJJ,KALI,CAKEC,GAAG,IAAIA,GAAG,CAACC,QALb,CAAP;AAMD,CAPD;;MAAMC,S;;AASN,UAAUE,UAAV,CAAqB;AAAED,EAAAA;AAAF,CAArB,EAA+B;AAC7B,MAAI;AACF,UAAMF,QAAQ,GAAG,MAAMd,IAAI,CAACe,SAAD,EAAYC,IAAZ,CAA3B;AACA,QAAIF,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B,MAAMjB,GAAG,CAACK,gBAAgB,CAAC,IAAD,CAAjB,CAAT;AAC7B,QAAIQ,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACE,MAAMjB,GAAG,CACPM,aAAa,CACXO,QAAQ,CAACK,IAAT,IACKL,QAAQ,CAACK,IAAT,CAAcC,KAAd,EAAqBN,QAAQ,CAACK,IAAT,CAAcE,QADxC,IAEI,EAHO,CADN,CAAT;AAOH,GAXD,CAWE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACD;AACF;;AAED,UAAUC,aAAV,CAAwB;AAAEV,EAAAA;AAAF,CAAxB,EAAkC;AAChC,MAAI;AACF,UAAMF,QAAQ,GAAG,MAAMd,IAAI,CAACS,QAAD,EAAWO,IAAX,CAA3B;AACA,QAAIF,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B,MAAMjB,GAAG,CAACG,mBAAmB,CAAC,IAAD,CAApB,CAAT;AAC7B,QAAIU,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6BK,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACK,IAArB;AAC9B,GAJD,CAIE,OAAOG,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACD;AACF;;AAED,UAAUE,QAAV,GAAqB;AACnB,QAAMzB,UAAU,CAACC,aAAD,EAAgBuB,aAAhB,CAAhB;AACA,QAAMxB,UAAU,CAACG,UAAD,EAAaY,UAAb,CAAhB;AACD;;AAED,eAAeU,QAAf","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\nimport {\n  REGISTER_USER,\n  registerUserSuccess,\n  LOGIN_USER,\n  loginUserSuccess,\n  loginUserFail,\n} from '../action';\nimport axios from 'axios';\n\nconst API_POST = users => {\n  return axios\n    .post(\n      'https://auth-backend-api.herokuapp.com/api/users/register',\n      users\n    )\n    .catch(err => err.response);\n};\n\nconst API_LOGIN = user => {\n  return axios\n    .post(\n      'https://auth-backend-api.herokuapp.com/api/users/login',\n      user\n    )\n    .catch(err => err.response);\n};\n\nfunction* loginUsers({ user }) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    if (response.status === 200) yield put(loginUserSuccess(true));\n    if (response.status === 400)\n      yield put(\n        loginUserFail(\n          response.data\n            ? (response.data.email, response.data.password)\n            : ''\n        )\n      );\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* registerUsers({ user }) {\n  try {\n    const response = yield call(API_POST, user);\n    if (response.status === 200) yield put(registerUserSuccess(true));\n    if (response.status === 400) console.log(response.data);\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(REGISTER_USER, registerUsers);\n  yield takeLatest(LOGIN_USER, loginUsers);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}