{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { REGISTER_USER, registerUserSuccess, registerUserFail, LOGIN_USER, loginUserFail, setRegisterAuth, FETCH_API, fetchApiSuccess, FETCH_SINGLE_API, fetchSingleApiSuccess } from '../action';\nimport axios from 'axios';\n\nconst FETCH_API_DATA = () => {\n  return axios.get(`https://api.punkapi.com/v2/beers?page=1&per_page=10`);\n};\n\n_c = FETCH_API_DATA;\n\nconst FETCH_S_API_DATA = () => {\n  return axios.get(`https://api.punkapi.com/v2/beers?page=1&per_page=10`);\n};\n\n_c2 = FETCH_S_API_DATA;\n\nconst API_REGISTER = async users => {\n  const response = await axios.post('https://auth-backend-api.herokuapp.com/api/users/register', users);\n  return response.data;\n};\n\n_c3 = API_REGISTER;\n\nconst API_LOGIN = async user => {\n  const response = await axios.post('https://auth-backend-api.herokuapp.com/api/users/login', user);\n  return response;\n};\n\n_c4 = API_LOGIN;\n\nfunction* fetchData() {\n  try {\n    const response = yield call(FETCH_API_DATA);\n    yield put(fetchApiSuccess(response.data));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* loginUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    const token = response.data.token;\n    yield localStorage.setItem('token', token);\n    yield put(setRegisterAuth(false));\n  } catch (e) {\n    yield put(loginUserFail(e.response.data.email, e.response.data.password));\n  }\n}\n\nfunction* registerUsers({\n  user\n}) {\n  try {\n    yield call(API_REGISTER, user);\n    yield put(registerUserSuccess(true));\n  } catch (e) {\n    yield put(registerUserFail(e.response.data.email));\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(FETCH_API, fetchData);\n  yield takeLatest(LOGIN_USER, loginUsers);\n  yield takeLatest(REGISTER_USER, registerUsers);\n}\n\nexport default userSaga;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"FETCH_API_DATA\");\n$RefreshReg$(_c2, \"FETCH_S_API_DATA\");\n$RefreshReg$(_c3, \"API_REGISTER\");\n$RefreshReg$(_c4, \"API_LOGIN\");","map":{"version":3,"sources":["/home/nidza/Desktop/my-app/src/store/saga/saga.js"],"names":["call","put","takeLatest","REGISTER_USER","registerUserSuccess","registerUserFail","LOGIN_USER","loginUserFail","setRegisterAuth","FETCH_API","fetchApiSuccess","FETCH_SINGLE_API","fetchSingleApiSuccess","axios","FETCH_API_DATA","get","FETCH_S_API_DATA","API_REGISTER","users","response","post","data","API_LOGIN","user","fetchData","e","console","log","message","loginUsers","token","localStorage","setItem","email","password","registerUsers","userSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,aADF,EAEEC,mBAFF,EAGEC,gBAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,eANF,EAOEC,SAPF,EAQEC,eARF,EASEC,gBATF,EAUEC,qBAVF,QAWO,WAXP;AAYA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,SAAOD,KAAK,CAACE,GAAN,CACJ,qDADI,CAAP;AAGD,CAJD;;KAAMD,c;;AAMN,MAAME,gBAAgB,GAAG,MAAM;AAC7B,SAAOH,KAAK,CAACE,GAAN,CACJ,qDADI,CAAP;AAGD,CAJD;;MAAMC,gB;;AAMN,MAAMC,YAAY,GAAG,MAAMC,KAAN,IAAe;AAClC,QAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CACrB,2DADqB,EAErBF,KAFqB,CAAvB;AAKA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAPD;;MAAMJ,Y;;AASN,MAAMK,SAAS,GAAG,MAAMC,IAAN,IAAc;AAC9B,QAAMJ,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CACrB,wDADqB,EAErBG,IAFqB,CAAvB;AAIA,SAAOJ,QAAP;AACD,CAND;;MAAMG,S;;AAQN,UAAUE,SAAV,GAAsB;AACpB,MAAI;AACF,UAAML,QAAQ,GAAG,MAAMnB,IAAI,CAACc,cAAD,CAA3B;AACA,UAAMb,GAAG,CAACS,eAAe,CAACS,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACD;AACF;;AAED,UAAUC,UAAV,CAAqB;AAAEN,EAAAA;AAAF,CAArB,EAA+B;AAC7B,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMnB,IAAI,CAACsB,SAAD,EAAYC,IAAZ,CAA3B;AACA,UAAMO,KAAK,GAAGX,QAAQ,CAACE,IAAT,CAAcS,KAA5B;AACA,UAAMC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B,CAAN;AAEA,UAAM7B,GAAG,CAACO,eAAe,CAAC,KAAD,CAAhB,CAAT;AACD,GAND,CAME,OAAOiB,CAAP,EAAU;AACV,UAAMxB,GAAG,CACPM,aAAa,CAACkB,CAAC,CAACN,QAAF,CAAWE,IAAX,CAAgBY,KAAjB,EAAwBR,CAAC,CAACN,QAAF,CAAWE,IAAX,CAAgBa,QAAxC,CADN,CAAT;AAGD;AACF;;AAED,UAAUC,aAAV,CAAwB;AAAEZ,EAAAA;AAAF,CAAxB,EAAkC;AAChC,MAAI;AACF,UAAMvB,IAAI,CAACiB,YAAD,EAAeM,IAAf,CAAV;AACA,UAAMtB,GAAG,CAACG,mBAAmB,CAAC,IAAD,CAApB,CAAT;AACD,GAHD,CAGE,OAAOqB,CAAP,EAAU;AACV,UAAMxB,GAAG,CAACI,gBAAgB,CAACoB,CAAC,CAACN,QAAF,CAAWE,IAAX,CAAgBY,KAAjB,CAAjB,CAAT;AACD;AACF;;AAED,UAAUG,QAAV,GAAqB;AACnB,QAAMlC,UAAU,CAACO,SAAD,EAAYe,SAAZ,CAAhB;AACA,QAAMtB,UAAU,CAACI,UAAD,EAAauB,UAAb,CAAhB;AACA,QAAM3B,UAAU,CAACC,aAAD,EAAgBgC,aAAhB,CAAhB;AACD;;AAED,eAAeC,QAAf","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\nimport {\n  REGISTER_USER,\n  registerUserSuccess,\n  registerUserFail,\n  LOGIN_USER,\n  loginUserFail,\n  setRegisterAuth,\n  FETCH_API,\n  fetchApiSuccess,\n  FETCH_SINGLE_API,\n  fetchSingleApiSuccess,\n} from '../action';\nimport axios from 'axios';\n\nconst FETCH_API_DATA = () => {\n  return axios.get(\n    `https://api.punkapi.com/v2/beers?page=1&per_page=10`\n  );\n};\n\nconst FETCH_S_API_DATA = () => {\n  return axios.get(\n    `https://api.punkapi.com/v2/beers?page=1&per_page=10`\n  );\n};\n\nconst API_REGISTER = async users => {\n  const response = await axios.post(\n    'https://auth-backend-api.herokuapp.com/api/users/register',\n    users\n  );\n\n  return response.data;\n};\n\nconst API_LOGIN = async user => {\n  const response = await axios.post(\n    'https://auth-backend-api.herokuapp.com/api/users/login',\n    user\n  );\n  return response;\n};\n\nfunction* fetchData() {\n  try {\n    const response = yield call(FETCH_API_DATA);\n    yield put(fetchApiSuccess(response.data));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* loginUsers({ user }) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    const token = response.data.token;\n    yield localStorage.setItem('token', token);\n\n    yield put(setRegisterAuth(false));\n  } catch (e) {\n    yield put(\n      loginUserFail(e.response.data.email, e.response.data.password)\n    );\n  }\n}\n\nfunction* registerUsers({ user }) {\n  try {\n    yield call(API_REGISTER, user);\n    yield put(registerUserSuccess(true));\n  } catch (e) {\n    yield put(registerUserFail(e.response.data.email));\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(FETCH_API, fetchData);\n  yield takeLatest(LOGIN_USER, loginUsers);\n  yield takeLatest(REGISTER_USER, registerUsers);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}