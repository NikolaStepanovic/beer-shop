{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { REGISTER_USER, registerUserSuccess, registerUserFail, LOGIN_USER, loginUserFail, setRegisterAuth } from '../action';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst API_REGISTER = async users => {\n  const response = await axios.post('https://auth-backend-api.herokuapp.com/api/users/register', users);\n  return response.data;\n};\n\n_c = API_REGISTER;\n\nconst API_LOGIN = async user => {\n  const response = await axios.post('https://auth-backend-api.herokuapp.com/api/users/login', user);\n  return response;\n};\n\n_c2 = API_LOGIN;\n\nfunction* loginUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    const token = response.data.token;\n    const decoded = jwt_decode(token);\n    yield localStorage.setItem('token', token);\n    yield localStorage.setItem('name', token);\n    yield put(setRegisterAuth(false));\n  } catch (e) {\n    yield put(loginUserFail(e.response.data.email, e.response.data.password));\n  }\n}\n\nfunction* registerUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_REGISTER, user);\n    console.log(`Register User`, response);\n    if (response.status === 200) yield put(registerUserSuccess(true));\n    if (response.status === 400) yield put(registerUserFail(response.data.email));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(REGISTER_USER, registerUsers);\n  yield takeLatest(LOGIN_USER, loginUsers);\n}\n\nexport default userSaga;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"API_REGISTER\");\n$RefreshReg$(_c2, \"API_LOGIN\");","map":{"version":3,"sources":["/home/nidza/Desktop/my-app/src/store/saga/saga.js"],"names":["call","put","takeLatest","REGISTER_USER","registerUserSuccess","registerUserFail","LOGIN_USER","loginUserFail","setRegisterAuth","axios","jwt_decode","API_REGISTER","users","response","post","data","API_LOGIN","user","loginUsers","token","decoded","localStorage","setItem","e","email","password","registerUsers","console","log","status","message","userSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,aADF,EAEEC,mBAFF,EAGEC,gBAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,eANF,QAOO,WAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAMC,YAAY,GAAG,MAAMC,KAAN,IAAe;AAClC,QAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAN,CACrB,2DADqB,EAErBF,KAFqB,CAAvB;AAKA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAPD;;KAAMJ,Y;;AASN,MAAMK,SAAS,GAAG,MAAMC,IAAN,IAAc;AAC9B,QAAMJ,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAN,CACrB,wDADqB,EAErBG,IAFqB,CAAvB;AAIA,SAAOJ,QAAP;AACD,CAND;;MAAMG,S;;AAQN,UAAUE,UAAV,CAAqB;AAAED,EAAAA;AAAF,CAArB,EAA+B;AAC7B,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMb,IAAI,CAACgB,SAAD,EAAYC,IAAZ,CAA3B;AACA,UAAME,KAAK,GAAGN,QAAQ,CAACE,IAAT,CAAcI,KAA5B;AACA,UAAMC,OAAO,GAAGV,UAAU,CAACS,KAAD,CAA1B;AACA,UAAME,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B,CAAN;AACA,UAAME,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BH,KAA7B,CAAN;AACA,UAAMlB,GAAG,CAACO,eAAe,CAAC,KAAD,CAAhB,CAAT;AACD,GAPD,CAOE,OAAOe,CAAP,EAAU;AACV,UAAMtB,GAAG,CACPM,aAAa,CAACgB,CAAC,CAACV,QAAF,CAAWE,IAAX,CAAgBS,KAAjB,EAAwBD,CAAC,CAACV,QAAF,CAAWE,IAAX,CAAgBU,QAAxC,CADN,CAAT;AAGD;AACF;;AAED,UAAUC,aAAV,CAAwB;AAAET,EAAAA;AAAF,CAAxB,EAAkC;AAChC,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMb,IAAI,CAACW,YAAD,EAAeM,IAAf,CAA3B;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAa,eAAb,EAA6Bf,QAA7B;AACA,QAAIA,QAAQ,CAACgB,MAAT,KAAoB,GAAxB,EAA6B,MAAM5B,GAAG,CAACG,mBAAmB,CAAC,IAAD,CAApB,CAAT;AAC7B,QAAIS,QAAQ,CAACgB,MAAT,KAAoB,GAAxB,EACE,MAAM5B,GAAG,CAACI,gBAAgB,CAACQ,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAAjB,CAAT;AACH,GAND,CAME,OAAOD,CAAP,EAAU;AACVI,IAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACO,OAAd;AACD;AACF;;AAED,UAAUC,QAAV,GAAqB;AACnB,QAAM7B,UAAU,CAACC,aAAD,EAAgBuB,aAAhB,CAAhB;AACA,QAAMxB,UAAU,CAACI,UAAD,EAAaY,UAAb,CAAhB;AACD;;AAED,eAAea,QAAf","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\nimport {\n  REGISTER_USER,\n  registerUserSuccess,\n  registerUserFail,\n  LOGIN_USER,\n  loginUserFail,\n  setRegisterAuth,\n} from '../action';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst API_REGISTER = async users => {\n  const response = await axios.post(\n    'https://auth-backend-api.herokuapp.com/api/users/register',\n    users\n  );\n\n  return response.data;\n};\n\nconst API_LOGIN = async user => {\n  const response = await axios.post(\n    'https://auth-backend-api.herokuapp.com/api/users/login',\n    user\n  );\n  return response;\n};\n\nfunction* loginUsers({ user }) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    const token = response.data.token;\n    const decoded = jwt_decode(token);\n    yield localStorage.setItem('token', token);\n    yield localStorage.setItem('name', token);\n    yield put(setRegisterAuth(false));\n  } catch (e) {\n    yield put(\n      loginUserFail(e.response.data.email, e.response.data.password)\n    );\n  }\n}\n\nfunction* registerUsers({ user }) {\n  try {\n    const response = yield call(API_REGISTER, user);\n    console.log(`Register User`, response);\n    if (response.status === 200) yield put(registerUserSuccess(true));\n    if (response.status === 400)\n      yield put(registerUserFail(response.data.email));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(REGISTER_USER, registerUsers);\n  yield takeLatest(LOGIN_USER, loginUsers);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}