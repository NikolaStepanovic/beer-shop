{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { REGISTER_USER, registerUserSuccess, registerUserFail, LOGIN_USER, loginUserSuccess, loginUserFail, currentUser, setRegisterAuth } from '../action';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst API_REGISTER = users => {\n  return axios.post('https://auth-backend-api.herokuapp.com/api/users/register', users).catch(err => err.response);\n};\n\n_c = API_REGISTER;\n\nconst API_LOGIN = user => {\n  return axios.post('https://auth-backend-api.herokuapp.com/api/users/login', user).catch(err => err.response);\n};\n\n_c2 = API_LOGIN;\n\nfunction* loginUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_LOGIN, user);\n\n    if (response.status === 200) {\n      const token = response.data.token;\n      const decoded = jwt_decode(token);\n      yield put(loginUserSuccess(true));\n      yield put(dispatch(setRegisterAuth(false)));\n      yield localStorage.setItem('token', token);\n      yield put(currentUser(decoded));\n    }\n\n    if (response.status === 400) yield put(loginUserFail(response.data.email, response.data.password));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* registerUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_REGISTER, user);\n    if (response.status === 200) yield put(registerUserSuccess(true));\n    if (response.status === 400) yield put(registerUserFail(response.data.email));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(REGISTER_USER, registerUsers);\n  yield takeLatest(LOGIN_USER, loginUsers);\n}\n\nexport default userSaga;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"API_REGISTER\");\n$RefreshReg$(_c2, \"API_LOGIN\");","map":{"version":3,"sources":["/home/nidza/Desktop/my-app/src/store/saga/saga.js"],"names":["call","put","takeLatest","REGISTER_USER","registerUserSuccess","registerUserFail","LOGIN_USER","loginUserSuccess","loginUserFail","currentUser","setRegisterAuth","axios","jwt_decode","API_REGISTER","users","post","catch","err","response","API_LOGIN","user","loginUsers","status","token","data","decoded","dispatch","localStorage","setItem","email","password","e","console","log","message","registerUsers","userSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,aADF,EAEEC,mBAFF,EAGEC,gBAHF,EAIEC,UAJF,EAKEC,gBALF,EAMEC,aANF,EAOEC,WAPF,EAQEC,eARF,QASO,WATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,SAAOH,KAAK,CACTI,IADI,CAEH,2DAFG,EAGHD,KAHG,EAKJE,KALI,CAKEC,GAAG,IAAIA,GAAG,CAACC,QALb,CAAP;AAMD,CAPD;;KAAML,Y;;AASN,MAAMM,SAAS,GAAGC,IAAI,IAAI;AACxB,SAAOT,KAAK,CACTI,IADI,CAEH,wDAFG,EAGHK,IAHG,EAKJJ,KALI,CAKEC,GAAG,IAAIA,GAAG,CAACC,QALb,CAAP;AAMD,CAPD;;MAAMC,S;;AASN,UAAUE,UAAV,CAAqB;AAAED,EAAAA;AAAF,CAArB,EAA+B;AAC7B,MAAI;AACF,UAAMF,QAAQ,GAAG,MAAMlB,IAAI,CAACmB,SAAD,EAAYC,IAAZ,CAA3B;;AACA,QAAIF,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMC,KAAK,GAAGL,QAAQ,CAACM,IAAT,CAAcD,KAA5B;AACA,YAAME,OAAO,GAAGb,UAAU,CAACW,KAAD,CAA1B;AACA,YAAMtB,GAAG,CAACM,gBAAgB,CAAC,IAAD,CAAjB,CAAT;AACA,YAAMN,GAAG,CAACyB,QAAQ,CAAChB,eAAe,CAAC,KAAD,CAAhB,CAAT,CAAT;AACA,YAAMiB,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,KAA9B,CAAN;AACA,YAAMtB,GAAG,CAACQ,WAAW,CAACgB,OAAD,CAAZ,CAAT;AACD;;AACD,QAAIP,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACE,MAAMrB,GAAG,CACPO,aAAa,CAACU,QAAQ,CAACM,IAAT,CAAcK,KAAf,EAAsBX,QAAQ,CAACM,IAAT,CAAcM,QAApC,CADN,CAAT;AAGH,GAdD,CAcE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACD;AACF;;AAED,UAAUC,aAAV,CAAwB;AAAEf,EAAAA;AAAF,CAAxB,EAAkC;AAChC,MAAI;AACF,UAAMF,QAAQ,GAAG,MAAMlB,IAAI,CAACa,YAAD,EAAeO,IAAf,CAA3B;AACA,QAAIF,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B,MAAMrB,GAAG,CAACG,mBAAmB,CAAC,IAAD,CAApB,CAAT;AAC7B,QAAIc,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACE,MAAMrB,GAAG,CAACI,gBAAgB,CAACa,QAAQ,CAACM,IAAT,CAAcK,KAAf,CAAjB,CAAT;AACH,GALD,CAKE,OAAOE,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACD;AACF;;AAED,UAAUE,QAAV,GAAqB;AACnB,QAAMlC,UAAU,CAACC,aAAD,EAAgBgC,aAAhB,CAAhB;AACA,QAAMjC,UAAU,CAACI,UAAD,EAAae,UAAb,CAAhB;AACD;;AAED,eAAee,QAAf","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\nimport {\n  REGISTER_USER,\n  registerUserSuccess,\n  registerUserFail,\n  LOGIN_USER,\n  loginUserSuccess,\n  loginUserFail,\n  currentUser,\n  setRegisterAuth,\n} from '../action';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst API_REGISTER = users => {\n  return axios\n    .post(\n      'https://auth-backend-api.herokuapp.com/api/users/register',\n      users\n    )\n    .catch(err => err.response);\n};\n\nconst API_LOGIN = user => {\n  return axios\n    .post(\n      'https://auth-backend-api.herokuapp.com/api/users/login',\n      user\n    )\n    .catch(err => err.response);\n};\n\nfunction* loginUsers({ user }) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    if (response.status === 200) {\n      const token = response.data.token;\n      const decoded = jwt_decode(token);\n      yield put(loginUserSuccess(true));\n      yield put(dispatch(setRegisterAuth(false)));\n      yield localStorage.setItem('token', token);\n      yield put(currentUser(decoded));\n    }\n    if (response.status === 400)\n      yield put(\n        loginUserFail(response.data.email, response.data.password)\n      );\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* registerUsers({ user }) {\n  try {\n    const response = yield call(API_REGISTER, user);\n    if (response.status === 200) yield put(registerUserSuccess(true));\n    if (response.status === 400)\n      yield put(registerUserFail(response.data.email));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(REGISTER_USER, registerUsers);\n  yield takeLatest(LOGIN_USER, loginUsers);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}