{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { REGISTER_USER, registerUserSuccess, registerUserFail, LOGIN_USER, loginUserSuccess, loginUserFail } from '../action';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst API_REGISTER = users => {\n  return axios.post('https://auth-backend-api.herokuapp.com/api/users/register', users).catch(err => err.response);\n};\n\n_c = API_REGISTER;\n\nconst API_LOGIN = user => {\n  return axios.post('https://auth-backend-api.herokuapp.com/api/users/login', user).catch(err => err.response);\n};\n\n_c2 = API_LOGIN;\n\nfunction* loginUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    console.log(response);\n\n    if (response.status === 200) {\n      const token = response.data.token;\n      const decoded = jwt_decode(token);\n      console.log(decoded.username);\n      yield put(loginUserSuccess(decoded));\n      yield localStorage.setItem('token', decoded.username, decoded.id);\n    }\n\n    if (response.status === 400) yield put(loginUserFail(response.data.email, response.data.password));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* registerUsers({\n  user\n}) {\n  try {\n    const response = yield call(API_REGISTER, user);\n    if (response.status === 200) yield put(registerUserSuccess(true));\n    if (response.status === 400) yield put(registerUserFail(response.data.email));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(REGISTER_USER, registerUsers);\n  yield takeLatest(LOGIN_USER, loginUsers);\n}\n\nexport default userSaga;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"API_REGISTER\");\n$RefreshReg$(_c2, \"API_LOGIN\");","map":{"version":3,"sources":["/home/nidza/Desktop/my-app/src/store/saga/saga.js"],"names":["call","put","takeLatest","REGISTER_USER","registerUserSuccess","registerUserFail","LOGIN_USER","loginUserSuccess","loginUserFail","axios","jwt_decode","API_REGISTER","users","post","catch","err","response","API_LOGIN","user","loginUsers","console","log","status","token","data","decoded","username","localStorage","setItem","id","email","password","e","message","registerUsers","userSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,aADF,EAEEC,mBAFF,EAGEC,gBAHF,EAIEC,UAJF,EAKEC,gBALF,EAMEC,aANF,QAOO,WAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,SAAOH,KAAK,CACTI,IADI,CAEH,2DAFG,EAGHD,KAHG,EAKJE,KALI,CAKEC,GAAG,IAAIA,GAAG,CAACC,QALb,CAAP;AAMD,CAPD;;KAAML,Y;;AASN,MAAMM,SAAS,GAAGC,IAAI,IAAI;AACxB,SAAOT,KAAK,CACTI,IADI,CAEH,wDAFG,EAGHK,IAHG,EAKJJ,KALI,CAKEC,GAAG,IAAIA,GAAG,CAACC,QALb,CAAP;AAMD,CAPD;;MAAMC,S;;AASN,UAAUE,UAAV,CAAqB;AAAED,EAAAA;AAAF,CAArB,EAA+B;AAC7B,MAAI;AACF,UAAMF,QAAQ,GAAG,MAAMhB,IAAI,CAACiB,SAAD,EAAYC,IAAZ,CAA3B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;;AACA,QAAIA,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMC,KAAK,GAAGP,QAAQ,CAACQ,IAAT,CAAcD,KAA5B;AACA,YAAME,OAAO,GAAGf,UAAU,CAACa,KAAD,CAA1B;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYI,OAAO,CAACC,QAApB;AACA,YAAMzB,GAAG,CAACM,gBAAgB,CAACkB,OAAD,CAAjB,CAAT;AACA,YAAME,YAAY,CAACC,OAAb,CACJ,OADI,EAEJH,OAAO,CAACC,QAFJ,EAGJD,OAAO,CAACI,EAHJ,CAAN;AAKD;;AACD,QAAIb,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EACE,MAAMrB,GAAG,CACPO,aAAa,CAACQ,QAAQ,CAACQ,IAAT,CAAcM,KAAf,EAAsBd,QAAQ,CAACQ,IAAT,CAAcO,QAApC,CADN,CAAT;AAGH,GAlBD,CAkBE,OAAOC,CAAP,EAAU;AACVZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,CAAC,CAACC,OAAd;AACD;AACF;;AAED,UAAUC,aAAV,CAAwB;AAAEhB,EAAAA;AAAF,CAAxB,EAAkC;AAChC,MAAI;AACF,UAAMF,QAAQ,GAAG,MAAMhB,IAAI,CAACW,YAAD,EAAeO,IAAf,CAA3B;AACA,QAAIF,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B,MAAMrB,GAAG,CAACG,mBAAmB,CAAC,IAAD,CAApB,CAAT;AAC7B,QAAIY,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EACE,MAAMrB,GAAG,CAACI,gBAAgB,CAACW,QAAQ,CAACQ,IAAT,CAAcM,KAAf,CAAjB,CAAT;AACH,GALD,CAKE,OAAOE,CAAP,EAAU;AACVZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,CAAC,CAACC,OAAd;AACD;AACF;;AAED,UAAUE,QAAV,GAAqB;AACnB,QAAMjC,UAAU,CAACC,aAAD,EAAgB+B,aAAhB,CAAhB;AACA,QAAMhC,UAAU,CAACI,UAAD,EAAaa,UAAb,CAAhB;AACD;;AAED,eAAegB,QAAf","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\nimport {\n  REGISTER_USER,\n  registerUserSuccess,\n  registerUserFail,\n  LOGIN_USER,\n  loginUserSuccess,\n  loginUserFail,\n} from '../action';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst API_REGISTER = users => {\n  return axios\n    .post(\n      'https://auth-backend-api.herokuapp.com/api/users/register',\n      users\n    )\n    .catch(err => err.response);\n};\n\nconst API_LOGIN = user => {\n  return axios\n    .post(\n      'https://auth-backend-api.herokuapp.com/api/users/login',\n      user\n    )\n    .catch(err => err.response);\n};\n\nfunction* loginUsers({ user }) {\n  try {\n    const response = yield call(API_LOGIN, user);\n    console.log(response);\n    if (response.status === 200) {\n      const token = response.data.token;\n      const decoded = jwt_decode(token);\n      console.log(decoded.username);\n      yield put(loginUserSuccess(decoded));\n      yield localStorage.setItem(\n        'token',\n        decoded.username,\n        decoded.id\n      );\n    }\n    if (response.status === 400)\n      yield put(\n        loginUserFail(response.data.email, response.data.password)\n      );\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* registerUsers({ user }) {\n  try {\n    const response = yield call(API_REGISTER, user);\n    if (response.status === 200) yield put(registerUserSuccess(true));\n    if (response.status === 400)\n      yield put(registerUserFail(response.data.email));\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(REGISTER_USER, registerUsers);\n  yield takeLatest(LOGIN_USER, loginUsers);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}